// Prisma schema for FlowVision
// AI-powered efficiency intelligence platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  role          Role           @default(LEADER)
  name          String?
  image         String?
  emailVerified DateTime?
  preferences   Json?
  aiTier        String         @default("basic") // basic, premium, enterprise
  businessProfile BusinessProfile?
  initiatives   Initiative[]   @relation("UserInitiatives")
  comments      Comment[]
  ideas         Idea[]
  votes         Vote[]
  auditLogs     AuditLog[]
  attachments   Attachment[]
  assignedRequirementCards RequirementCard[] @relation("UserRequirementCards")
  createdRequirementCards  RequirementCard[] @relation("CreatedRequirementCards")
  approvedRequirementCards RequirementCard[] @relation("ApprovedRequirementCards")
  accounts      Account[]
  sessions      Session[]
  aiUsageLogs   AIUsageLog[]
  aiQuota       AIUserQuota?
  aiConfigurations AIConfiguration[]
  aiFeedback    AIQualityFeedback[]
  assignedSolutions InitiativeSolution[] @relation("AssignedSolutions")
  assignedTasks SolutionTask[] @relation("AssignedTasks")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum Role {
  ADMIN
  LEADER
}

model BusinessProfile {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique
  industry String
  size     Int
  metrics  Json
}

model Initiative {
  id             String        @id @default(cuid())
  title          String
  problem        String
  goal           String
  kpis           String[]
  requirements   String[]      @default([])
  acceptanceCriteria String[]  @default([])
  owner          User          @relation("UserInitiatives", fields: [ownerId], references: [id])
  ownerId        String
  timelineStart  DateTime?
  timelineEnd    DateTime?
  status         String
  progress       Int           @default(0)
  difficulty     Int?
  roi            Int?
  priorityScore  Int?
  orderIndex     Int           @default(0)
  budget         Int?
  estimatedHours Int?
  actualHours    Int?
  phase          String?       @default("planning")
  type           String?       @default("Process Improvement") // Process Improvement, Technology, Strategic, Operational, Quality, Cost Reduction
  cluster        IssueCluster? @relation("ClusterInitiatives", fields: [clusterId], references: [id])
  clusterId      String?
  addressedIssues Issue[]      @relation("IssueInitiatives") // Many-to-many with issues
  crossImpact    Json?         // Multi-departmental impact analysis
  clusterMetrics Json?         // Cluster-specific success metrics
  dependencies   Initiative[]  @relation("InitiativeDependencies")
  dependents     Initiative[]  @relation("InitiativeDependencies")
  milestones     Milestone[]
  assignments    ResourceAssignment[]
  comments       Comment[]
  ideas          Idea[]
  votes          Vote[]
  attachments    Attachment[]
  requirementCards RequirementCard[]
  solutions      InitiativeSolution[] @relation("InitiativeSolutions")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model RequirementCard {
  id            String      @id @default(cuid())
  initiative    Initiative  @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId  String
  type          String      @default("BUSINESS") // BUSINESS, FUNCTIONAL, ACCEPTANCE
  title         String
  description   String
  priority      String      @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  status        String      @default("DRAFT") // DRAFT, REVIEW, APPROVED, REJECTED
  category      String?     // Optional grouping
  assignedTo    User?       @relation("UserRequirementCards", fields: [assignedToId], references: [id])
  assignedToId  String?
  createdBy     User        @relation("CreatedRequirementCards", fields: [createdById], references: [id])
  createdById   String
  approvedBy    User?       @relation("ApprovedRequirementCards", fields: [approvedById], references: [id])
  approvedById  String?
  approvedAt    DateTime?
  orderIndex    Int         @default(0)
  // AI Generation Fields
  aiGenerated   Boolean     @default(false) // Whether generated by AI
  sourceType    String?     // 'issue', 'cluster', 'manual'
  sourceId      String?     // ID of source issue/cluster
  aiConfidence  Int?        // AI confidence score (0-100)
  comments      Comment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Team {
  id          String              @id @default(cuid())
  name        String
  department  String?
  capacity    Int                 @default(40) // hours per week
  skills      String[]
  assignments ResourceAssignment[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model Milestone {
  id           String     @id @default(cuid())
  title        String
  description  String?
  dueDate      DateTime
  status       String     @default("pending") // pending, in_progress, completed, delayed
  initiative   Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId String
  progress     Int        @default(0)
  comments     Comment[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ResourceAssignment {
  id           String     @id @default(cuid())
  initiative   Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId String
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  hoursAllocated Int      @default(0)
  startDate    DateTime?
  endDate      DateTime?
  role         String?    // "lead", "contributor", "reviewer"
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([initiativeId, teamId])
}

model Issue {
  id            String        @id @default(cuid())
  description   String
  votes         Int           @default(0)
  heatmapScore  Int           @default(0)
  department    String?       // Added for clustering analysis
  category      String?       // Added for clustering analysis
  cluster       IssueCluster? @relation(fields: [clusterId], references: [id])
  clusterId     String?
  similarity    Json?         // Semantic similarity scores to other issues
  keywords      String[]      @default([]) // Extracted keywords for clustering
  crossImpact   Json?         // Cross-departmental impact analysis
  // AI Summary Fields
  aiSummary     String?       // AI-generated analysis and summary
  aiConfidence  Int?          // AI confidence score (0-100)
  aiGeneratedAt DateTime?     // When AI summary was created
  aiVersion     String?       // AI model version used
  // System Impact Relationships
  systemImpacts IssueSystemImpact[] // System categories affected by this issue
  comments      Comment[]
  userVotes     Vote[]
  initiatives   Initiative[]  @relation("IssueInitiatives") // Many-to-many with initiatives
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt @default(now())
}

model IssueCluster {
  id             String      @id @default(cuid())
  name           String      // e.g., "Project Coordination & Communication"
  description    String      // Detailed description of cluster theme
  category       String      // e.g., "coordination", "technology", "process"
  severity       String      @default("medium") // low, medium, high, critical
  theme          String      // Brief theme description
  keywords       String[]    @default([]) // Keywords used for clustering
  issues         Issue[]     // Related issues in this cluster
  initiatives    Initiative[] @relation("ClusterInitiatives") // Strategic initiatives addressing this cluster
  rootCauses     Json?       // AI-identified root causes
  impactAnalysis Json?       // Cross-departmental impact assessment
  metrics        Json?       // Cluster performance metrics
  // AI Summary Fields for Cluster
  aiSummary      String?     // AI-generated consolidated analysis across issues
  aiInsights     Json?       // Advanced AI insights (patterns, recommendations, etc.)
  aiConfidence   Int?        // AI confidence score (0-100)
  aiGeneratedAt  DateTime?   // When AI summary was created
  aiVersion      String?     // AI model version used
  color          String      @default("#3B82F6") // UI color for visualization
  isActive       Boolean     @default(true) // Whether cluster is actively used
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Comment {
  id           String      @id @default(cuid())
  content      String
  author       User        @relation(fields: [authorId], references: [id])
  authorId     String
  initiative   Initiative? @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId String?
  issue        Issue?      @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId      String?
  idea         Idea?       @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId       String?
  milestone    Milestone?  @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  milestoneId  String?
  requirementCard RequirementCard? @relation(fields: [requirementCardId], references: [id], onDelete: Cascade)
  requirementCardId String?
  parentComment Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  parentId     String?
  replies      Comment[]   @relation("CommentReplies")
  mentions     String[]    // User IDs mentioned in comment
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Idea {
  id          String     @id @default(cuid())
  title       String
  description String
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  category    String     @default("general") // general, process, technology, strategy
  priority    String     @default("medium") // low, medium, high
  status      String     @default("idea") // idea, reviewing, approved, rejected, implemented
  votes       Int        @default(0)
  tags        String[]
  assignedTo  String?    // User ID for assignment
  dueDate     DateTime?
  initiative  Initiative? @relation(fields: [initiativeId], references: [id])
  initiativeId String?
  userVotes   Vote[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Vote {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  initiative   Initiative? @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId String?
  idea         Idea?       @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId       String?
  issue        Issue?      @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId      String?
  type         String      // up, down, priority
  value        Int         @default(1)
  createdAt    DateTime    @default(now())

  @@unique([userId, initiativeId])
  @@unique([userId, ideaId])
  @@unique([userId, issueId])
}

model AuditLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  details   Json
  timestamp DateTime @default(now())
}

model Attachment {
  id           String     @id @default(cuid())
  filename     String
  filepath     String
  mimetype     String
  size         Int
  initiative   Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId String
  uploadedBy   User       @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// AI Optimization Models
model AIUsageLog {
  id           String   @id @default(cuid())
  requestId    String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  operation    String
  inputTokens  Int      @default(0)
  outputTokens Int      @default(0)
  totalTokens  Int      @default(0)
  cost         Float    @default(0)
  latency      Int      @default(0)
  cacheHit     Boolean  @default(false)
  modelUsed    String   @default("gpt-3.5-turbo")
  quality      Int      @default(100)
  timestamp    DateTime @default(now())
  metadata     Json?
  feedback     AIQualityFeedback[]

  @@index([userId, timestamp])
  @@index([operation, timestamp])
  @@index([modelUsed, timestamp])
}

model AIUserQuota {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier               String   @default("basic")
  dailyTokenLimit    Int      @default(10000)
  monthlyTokenLimit  Int      @default(250000)
  dailyUsedTokens    Int      @default(0)
  monthlyUsedTokens  Int      @default(0)
  dailyCost          Float    @default(0)
  monthlyCost        Float    @default(0)
  lastResetDaily     DateTime @default(now())
  lastResetMonthly   DateTime @default(now())
  isBlocked          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model AIPerformanceMetric {
  id            String   @id @default(cuid())
  operation     String
  model         String
  avgLatency    Int      @default(0)
  avgCost       Float    @default(0)
  avgQuality    Int      @default(100)
  successRate   Float    @default(1.0)
  cacheHitRate  Float    @default(0.0)
  requestCount  Int      @default(0)
  totalTokens   Int      @default(0)
  date          DateTime
  createdAt     DateTime @default(now())

  @@unique([operation, model, date])
  @@index([date])
}

model AICacheEntry {
  id         String   @id @default(cuid())
  cacheKey   String   @unique
  operation  String
  prompt     String
  response   Json
  quality    Int      @default(100)
  hitCount   Int      @default(0)
  modelUsed  String
  tokenCount Int      @default(0)
  cost       Float    @default(0)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  lastUsed   DateTime @default(now())

  @@index([operation])
  @@index([expiresAt])
}

model AIConfiguration {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  isActive    Boolean  @default(true)
  updatedBy   String
  updatedUser User     @relation(fields: [updatedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AIQualityFeedback {
  id             String        @id @default(cuid())
  usageLogId     String
  usageLog       AIUsageLog    @relation(fields: [usageLogId], references: [id], onDelete: Cascade)
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating         Int           // 1-5 scale (validation handled in application)
  feedback       String?
  isHelpful      Boolean?
  reportedIssues String[]
  createdAt      DateTime      @default(now())
}

// Solutions Framework Models
model InitiativeSolution {
  id               String           @id @default(cuid())
  
  // Relationships
  initiative       Initiative       @relation("InitiativeSolutions", fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId     String
  
  // Solution details
  title            String           // e.g., "Implement Project Management Training"
  description      String           // Detailed solution approach
  type             SolutionType     // TECHNOLOGY, PROCESS, TRAINING, POLICY
  
  // Planning and execution
  priority         Int              @default(0) // Higher number = higher priority
  status           SolutionStatus   @default(DRAFT) // DRAFT, PLANNED, IN_PROGRESS, COMPLETED, CANCELLED
  estimatedCost    Float?           // Estimated cost in dollars
  estimatedHours   Int?             // Estimated effort in hours
  actualCost       Float?           // Actual cost spent
  actualHours      Int?             // Actual hours spent
  
  // Timeline
  plannedStartDate DateTime?        // When solution is planned to start
  plannedEndDate   DateTime?        // When solution is planned to complete
  actualStartDate  DateTime?        // When solution actually started
  actualEndDate    DateTime?        // When solution actually completed
  
  // Assignment and ownership
  assignedTo       User?            @relation("AssignedSolutions", fields: [assignedToId], references: [id])
  assignedToId     String?
  
  // AI generation support
  isAIGenerated    Boolean          @default(false) // Whether generated by AI
  aiConfidence     Int?             // AI confidence score (0-100)
  aiReasoning      String?          // AI explanation for solution recommendation
  sourceType       String?          // 'cluster', 'issue', 'manual', 'ai_analysis'
  sourceId         String?          // ID of source cluster/issue
  
  // Progress tracking
  progress         Int              @default(0) // Progress percentage (0-100)
  
  // Validation and approval
  isValidated      Boolean          @default(false) // Whether validated by human
  validatedBy      String?          // User ID who validated
  validatedAt      DateTime?        // When validation occurred
  
  // Dependencies and relationships
  dependencies     InitiativeSolution[] @relation("SolutionDependencies")
  dependents       InitiativeSolution[] @relation("SolutionDependencies")
  
  // Task breakdown
  tasks            SolutionTask[]   // Related tasks for this solution
  
  // Metadata
  tags             String[]         @default([]) // Additional categorization
  notes            String?          // Additional notes or context
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  @@index([initiativeId, status])
  @@index([assignedToId])
  @@index([type, status])
  @@index([priority])
}

enum SolutionType {
  TECHNOLOGY  // Software implementation, system upgrades, tool adoption
  PROCESS     // Workflow changes, procedure updates, process optimization
  TRAINING    // Skills development, education programs, certification
  POLICY      // Rule changes, governance updates, compliance modifications
}

enum SolutionStatus {
  DRAFT        // Solution is being defined
  PLANNED      // Solution is approved and scheduled
  IN_PROGRESS  // Solution implementation is underway
  COMPLETED    // Solution has been successfully implemented
  CANCELLED    // Solution was cancelled or abandoned
}

model SolutionTask {
  id               String           @id @default(cuid())
  
  // Relationships
  solution         InitiativeSolution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  solutionId       String
  
  // Task details
  title            String           // e.g., "Configure Deltek user permissions"
  description      String?          // Detailed task description
  
  // Assignment and ownership
  assignedTo       User?            @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId     String?
  
  // Planning and execution
  status           TaskStatus       @default(TODO) // TODO, IN_PROGRESS, COMPLETED, CANCELLED
  priority         Int              @default(0) // Higher number = higher priority
  estimatedHours   Int?             // Estimated effort in hours
  actualHours      Int?             // Actual hours spent
  
  // Timeline
  dueDate          DateTime?        // When task should be completed
  completedAt      DateTime?        // When task was actually completed
  
  // Dependencies
  dependsOn        SolutionTask[]   @relation("TaskDependencies")
  blockedBy        SolutionTask[]   @relation("TaskDependencies")
  
  // AI generation support
  isAIGenerated    Boolean          @default(false) // Whether generated by AI
  aiConfidence     Int?             // AI confidence score (0-100)
  aiReasoning      String?          // AI explanation for task recommendation
  
  // Progress tracking
  progress         Int              @default(0) // Progress percentage (0-100)
  
  // Metadata
  tags             String[]         @default([]) // Additional categorization
  notes            String?          // Additional notes or context
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  @@index([solutionId, status])
  @@index([assignedToId])
  @@index([status, dueDate])
  @@index([priority])
}

enum TaskStatus {
  TODO          // Task is ready to be started
  IN_PROGRESS   // Task is currently being worked on
  COMPLETED     // Task has been finished
  CANCELLED     // Task was cancelled or is no longer needed
}

model IssueSystemImpact {
  id                String           @id @default(cuid())
  
  // Relationships
  issue             Issue            @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId           String
  systemCategory    SystemCategory   @relation(fields: [systemCategoryId], references: [id], onDelete: Cascade)
  systemCategoryId  String
  
  // Impact details
  impactLevel       ImpactLevel      // LOW, MEDIUM, HIGH, CRITICAL
  description       String?          // Optional description of specific impact
  
  // AI-generated insights
  isAIGenerated     Boolean          @default(false) // Whether this impact was identified by AI
  aiConfidence      Int?             // AI confidence score (0-100)
  aiReasoning       String?          // AI explanation for why this impact was identified
  
  // Validation
  isValidated       Boolean          @default(false) // Whether human has validated this impact
  validatedBy       String?          // User ID who validated
  validatedAt       DateTime?        // When validation occurred
  
  // Metadata
  priority          Int              @default(0) // For ordering impacts within an issue
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@unique([issueId, systemCategoryId]) // Prevent duplicate impacts for same issue/system
  @@index([impactLevel])
  @@index([isAIGenerated])
  @@index([isValidated])
}

enum ImpactLevel {
  LOW       // Minor impact, workaround available
  MEDIUM    // Moderate impact, affects efficiency
  HIGH      // Significant impact, affects productivity
  CRITICAL  // Severe impact, blocks operations
}

model SystemCategory {
  id               String           @id @default(cuid())
  name             String           // e.g., "Deltek", "Project Management", "Leadership Team"
  description      String?          // Detailed description of the system/process/role
  type             SystemType       // TECHNOLOGY, PROCESS, PEOPLE
  industry         String?          // Industry context (e.g., "architecture", "engineering")
  isDefault        Boolean          @default(false) // Whether this is a default/template category
  isActive         Boolean          @default(true)  // Whether category is currently in use
  
  // Hierarchical structure
  parentId         String?          // Self-referencing for hierarchy
  parent           SystemCategory?  @relation("SystemHierarchy", fields: [parentId], references: [id])
  children         SystemCategory[] @relation("SystemHierarchy")
  
  // Organization context
  organizationId   String?          // Future: multi-tenant support
  
  // Metadata
  tags             String[]         @default([]) // Additional tagging for flexibility
  iconUrl          String?          // Optional icon for UI representation
  color            String?          // Color coding for UI visualization
  
  // Usage tracking
  usageCount       Int              @default(0) // How many issues/initiatives use this category
  
  // Relationships
  issueImpacts     IssueSystemImpact[]
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  @@index([type, isActive])
  @@index([parentId])
  @@index([organizationId])
  @@unique([name, type, organizationId]) // Prevent duplicates within org/type
}

enum SystemType {
  TECHNOLOGY  // Software, tools, platforms (e.g., Deltek, Revit, Office 365)
  PROCESS     // Business processes, workflows (e.g., Design Review, Project Closeout)
  PEOPLE      // Roles, teams, stakeholders (e.g., Project Manager, Client, Leadership)
}
