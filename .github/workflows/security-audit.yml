name: Security Audit

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-audit:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Security vulnerability scan
        run: |
          npx audit-ci --moderate
        continue-on-error: true

      - name: Environment security validation
        run: |
          npm run security:validate || echo "Environment validation failed - expected in CI"

      - name: TypeScript type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test'
          NEXTAUTH_SECRET: 'test-secret-key-for-ci-only-not-secure'
          NEXTAUTH_URL: 'http://localhost:3000'

      - name: Security-focused linting
        run: |
          # Check for hardcoded secrets
          echo "Checking for hardcoded secrets..."
          ! grep -r "admin123\|principal123\|pm123\|design123\|eng123\|ops123" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . || exit 1

          # Check for API keys in code
          echo "Checking for exposed API keys..."
          ! grep -r "sk-[a-zA-Z0-9]" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . || exit 1

          # Check for TODO/FIXME security items
          echo "Checking for security TODOs..."
          grep -r "TODO.*security\|FIXME.*security\|SECURITY.*TODO" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . || echo "No security TODOs found"

      - name: Dependency security check
        run: |
          # Check for known vulnerable packages
          npx retire --exitwith 1 || echo "Retire.js check completed"

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: 'FlowVision'
          path: '.'
          format: 'JSON'

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report-${{ matrix.node-version }}
          path: reports/

  dockerfile-security:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'Dockerfile') || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

      - name: Build Docker image for security scan
        run: |
          docker build -t flowvision:security-test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'flowvision:security-test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  codeql-analysis:
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  security-headers-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start application
        run: |
          npm run build
          npm start &
          sleep 30
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test'
          NEXTAUTH_SECRET: 'test-secret-key-for-ci-only-not-secure'
          NEXTAUTH_URL: 'http://localhost:3000'

      - name: Check security headers
        run: |
          # Check for security headers
          response=$(curl -I -s http://localhost:3000)

          echo "Checking security headers..."
          echo "$response" | grep -i "x-frame-options" || (echo "❌ X-Frame-Options header missing" && exit 1)
          echo "$response" | grep -i "x-content-type-options" || (echo "❌ X-Content-Type-Options header missing" && exit 1)
          echo "$response" | grep -i "referrer-policy" || (echo "❌ Referrer-Policy header missing" && exit 1)
          echo "$response" | grep -i "content-security-policy" || (echo "❌ Content-Security-Policy header missing" && exit 1)

          echo "✅ All required security headers present"

  notification:
    runs-on: ubuntu-latest
    needs: [security-audit, dockerfile-security, codeql-analysis]
    if: always() && (github.event_name == 'schedule' || failure())

    steps:
      - name: Security audit summary
        run: |
          echo "Security audit completed with the following results:"
          echo "- Security Audit: ${{ needs.security-audit.result }}"
          echo "- Dockerfile Security: ${{ needs.dockerfile-security.result }}"
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}"

          if [[ "${{ needs.security-audit.result }}" == "failure" || "${{ needs.dockerfile-security.result }}" == "failure" || "${{ needs.codeql-analysis.result }}" == "failure" ]]; then
            echo "❌ Security vulnerabilities detected! Please review the workflow results."
            exit 1
          else
            echo "✅ No critical security issues found."
          fi
