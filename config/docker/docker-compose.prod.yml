# Production Docker Compose configuration for FlowVision
# Optimized for production deployment with enhanced security and monitoring

version: '3.8'

services:
  # Main application service (production-optimized)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        NODE_ENV: production
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=100
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SENTRY_DSN=${SENTRY_DSN}
      - NEXT_PUBLIC_GA_ID=${NEXT_PUBLIC_GA_ID}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - /app/logs:/app/logs
      - /app/uploads:/app/uploads
    networks:
      - flowvision_network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp

  # PostgreSQL database (production configuration)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: '--auth-local=md5 --auth-host=md5'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./scripts/postgres-backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - flowvision_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c log_statement=ddl
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

  # Redis (production configuration with persistence)
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - flowvision_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    networks:
      - flowvision_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - flowvision_network
      - monitoring_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    security_opt:
      - no-new-privileges:true

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - flowvision_network
      - monitoring_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    security_opt:
      - no-new-privileges:true

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - '3100:3100'
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml:ro
    networks:
      - monitoring_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    command: -config.file=/etc/loki/local-config.yaml
    security_opt:
      - no-new-privileges:true

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    volumes:
      - /app/logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - ./monitoring/promtail/promtail.yml:/etc/promtail/config.yml:ro
    networks:
      - monitoring_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    command: -config.file=/etc/promtail/config.yml
    security_opt:
      - no-new-privileges:true

  # Automated backup service
  backup:
    image: postgres:15-alpine
    volumes:
      - postgres_backups:/backups
      - ./scripts/postgres-backup.sh:/backup.sh:ro
    networks:
      - flowvision_network
    restart: 'no'
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
    command: /bin/sh -c "while true; do /backup.sh; sleep 86400; done"
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/flowvision/data/postgres
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/flowvision/backups/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/flowvision/data/redis
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/flowvision/logs/nginx
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/flowvision/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/flowvision/data/grafana
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/flowvision/data/loki

networks:
  flowvision_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
