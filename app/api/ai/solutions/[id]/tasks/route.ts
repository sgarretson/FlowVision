import { NextRequest, NextResponse } from 'next/server';
import { getCurrentUser } from '@/lib/rbac';
import { prisma } from '@/lib/prisma';
import { aiSolutionEngine } from '@/lib/ai-solution-engine';
import { z } from 'zod';

const taskGenerationSchema = z.object({
  maxTasks: z.number().min(1).max(15).default(8),
  autoCreate: z.boolean().default(false),
  assignToUserId: z.string().optional(),
});

export async function POST(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    // Authenticate user
    const user = await getCurrentUser();
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Parse and validate request
    const body = await request.json();
    const validatedData = taskGenerationSchema.parse(body);

    // Get solution details
    const solution = await prisma.initiativeSolution.findUnique({
      where: { id: params.id },
      include: {
        initiative: {
          select: {
            id: true,
            ownerId: true,
            title: true,
          },
        },
        tasks: {
          select: {
            id: true,
            title: true,
            status: true,
          },
        },
      },
    });

    if (!solution) {
      return NextResponse.json({ error: 'Solution not found' }, { status: 404 });
    }

    // Check permissions (owner or admin)
    if (user.role !== 'ADMIN' && solution.initiative.ownerId !== user.id) {
      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });
    }

    // Generate AI task recommendations
    const taskRecommendations = await aiSolutionEngine.generateTaskRecommendations(
      {
        id: solution.id,
        title: solution.title,
        description: solution.description,
        type: solution.type,
      },
      validatedData.maxTasks
    );

    let createdTasks: any[] = [];

    // Auto-create tasks if requested
    if (validatedData.autoCreate) {
      const tasksToCreate = taskRecommendations.map((task, index) => ({
        solutionId: solution.id,
        title: task.title,
        description: task.description,
        estimatedHours: task.estimatedHours,
        priority: task.priority,
        assignedToId: validatedData.assignToUserId || null,
        isAIGenerated: true,
        aiConfidence: task.confidence,
        aiReasoning: task.reasoning,
        tags: task.tags,
        progress: 0,
        status: 'TODO' as const,
      }));

      // Create tasks in transaction
      createdTasks = await prisma.$transaction(
        tasksToCreate.map((taskData) =>
          prisma.solutionTask.create({
            data: taskData,
            include: {
              assignedTo: {
                select: {
                  id: true,
                  name: true,
                  email: true,
                },
              },
            },
          })
        )
      );

      // Handle dependencies (simplified - just reference by title for now)
      for (let i = 0; i < taskRecommendations.length; i++) {
        const recommendation = taskRecommendations[i];
        const createdTask = createdTasks[i];

        if (recommendation.dependencies && recommendation.dependencies.length > 0) {
          // Find matching tasks by title (simple approach for MVP)
          const dependentTasks = createdTasks.filter((task) =>
            recommendation.dependencies.some((dep) =>
              task.title.toLowerCase().includes(dep.toLowerCase())
            )
          );

          if (dependentTasks.length > 0) {
            // Update task with dependencies (this would need a proper M:M relationship)
            await prisma.solutionTask.update({
              where: { id: createdTask.id },
              data: {
                notes: `Dependencies: ${dependentTasks.map((t) => t.title).join(', ')}`,
              },
            });
          }
        }
      }

      // Log task creation
      await prisma.auditLog.create({
        data: {
          action: 'AI_TASKS_CREATED',
          userId: user.id,
          details: {
            solutionId: solution.id,
            initiativeId: solution.initiative.id,
            taskCount: createdTasks.length,
            autoGenerated: true,
            avgConfidence:
              taskRecommendations.reduce((sum, t) => sum + t.confidence, 0) /
              taskRecommendations.length,
          },
        },
      });
    }

    // Log AI usage
    await prisma.auditLog.create({
      data: {
        action: 'AI_TASK_RECOMMENDATIONS',
        userId: user.id,
        details: {
          solutionId: solution.id,
          recommendationCount: taskRecommendations.length,
          autoCreated: validatedData.autoCreate,
          avgConfidence:
            taskRecommendations.reduce((sum, t) => sum + t.confidence, 0) /
            taskRecommendations.length,
        },
      },
    });

    return NextResponse.json({
      success: true,
      solution: {
        id: solution.id,
        title: solution.title,
        type: solution.type,
      },
      recommendations: taskRecommendations,
      ...(validatedData.autoCreate && {
        createdTasks: createdTasks.map((task) => ({
          id: task.id,
          title: task.title,
          description: task.description,
          estimatedHours: task.estimatedHours,
          priority: task.priority,
          status: task.status,
          assignedTo: task.assignedTo,
          aiGenerated: true,
          confidence: task.aiConfidence,
        })),
      }),
      generatedAt: new Date(),
      userId: user.id,
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid input data', details: error.errors },
        { status: 400 }
      );
    }

    console.error('‚ùå Error generating AI task recommendations:', error);
    return NextResponse.json(
      {
        error: 'Failed to generate task recommendations',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}
